local soc_family = import "../../configs/soc_family.libjsonnet";
local product_soc = import "../../configs/product_soc.libjsonnet";
local soc_specific_repo = import "../../configs/soc_specific_repo.libjsonnet";
local product_soc_family(product) = soc_family(product_soc(product));
local extra_ppa = import "../../configs/extra_ppa.libjsonnet";
local distro_check = import "../../configs/distro_check.libjsonnet";
local vscodium = import "vscodium.libjsonnet";

local radxa_url(radxa_mirror) = (
    if radxa_mirror == ""
    then
        "https://radxa-repo.github.io/"
    else
        radxa_mirror
);

function(suite, radxa_mirror, radxa_repo_suffix, product, temp_dir, install_vscodium) {
    mmdebstrap+: {
        packages+: [
            "radxa-archive-keyring",
            "local-apt-repository",
        ],
        "setup-hooks"+: [
            'mkdir -p "$1/etc/rsdk/"',
            |||
                set -e
                mkdir -p "$1/srv/"
                cp -R "%(temp_dir)s/debs/." "$1/srv/local-apt-repository"
                cd "$1/srv/local-apt-repository"
                apt-ftparchive packages . > ./Packages
                apt-ftparchive -o "APT::FTPArchive::Release::Origin=local-apt-repository" release . > ./Release
                cd -
                echo "deb [trusted=yes] file://$1/srv/local-apt-repository ./" > "$1/etc/apt/sources.list.d/99-local-apt-repository.list"
                cat << EOF > "$1/etc/apt/preferences.d/local-apt-repository"
                Package: *
                Pin: release o=local-apt-repository
                Pin-Priority: 1999
                EOF
            ||| % {
                temp_dir: temp_dir,
            },
        ] + (if soc_specific_repo(product_soc(product))
        then
            [
                |||
                    echo deb %(radxa_url)s%(product_soc)s-%(suite)s %(product_soc)s-%(suite)s main > "$1/etc/apt/sources.list.d/80-radxa-%(product_soc)s.list"
                    wget -O "$1/etc/rsdk/80-radxa-%(product_soc)s.pkgs.json" %(radxa_url)s%(product_soc)s-%(suite)s/pkgs.json
                ||| % {
                    radxa_url: radxa_url(radxa_mirror),
                    suite: suite + radxa_repo_suffix,
                    product_soc: product_soc(product),
                }
            ]
        else
            [
                |||
                    echo deb %(radxa_url)s%(suite)s %(product_soc_family)s-%(suite)s main > "$1/etc/apt/sources.list.d/80-radxa-%(product_soc_family)s.list"
                    wget -O "$1/etc/rsdk/80-radxa-%(product_soc_family)s.pkgs.json" %(radxa_url)s%(suite)s/pkgs.json
                ||| % {
                    radxa_url: radxa_url(radxa_mirror),
                    suite: suite + radxa_repo_suffix,
                    product_soc_family: product_soc_family(product),
                }
            ]
        ) + [
            |||
                echo deb %(radxa_url)s%(suite)s %(suite)s main > "$1/etc/apt/sources.list.d/70-radxa.list"
                wget -O "$1/etc/rsdk/70-radxa.pkgs.json" %(radxa_url)s%(suite)s/pkgs.json
            ||| % {
                    radxa_url: radxa_url(radxa_mirror),
                    suite: suite + radxa_repo_suffix,
                },
            'curl -L -o "$1/etc/radxa_apt_snapshot" %(radxa_url)s%(suite)s/pkgs.json'
                % {
                    radxa_url: radxa_url(radxa_mirror),
                    suite: suite + radxa_repo_suffix,
                },
        ],
        "essential-hooks"+: [
            |||
                APT_CONFIG="$MMDEBSTRAP_APT_CONFIG" \
                apt-get install -oDPkg::Chroot-Directory="$1" -y \
                software-properties-common
            |||
        ] + (if distro_check(suite) == "ubuntu"
            then
                [
                    |||
                        chroot "$1" add-apt-repository -y -n "ppa:mozillateam/ppa"
                    |||,
                ]
            else
                []
        ) + (if std.length(extra_ppa(product)) > 0
        then
        [
            |||
                chroot "$1" add-apt-repository -y -n "ppa:%(ppa)s"
            ||| % {
                ppa: ppa,
            } for ppa in extra_ppa(product)
        ]
        else 
            []
        ),
        "customize-hooks"+: [
            |||
                set -e
                export SYSTEMD_RELAX_ESP_CHECKS=1

                APT_CONFIG="$MMDEBSTRAP_APT_CONFIG" apt-get update -oDPkg::Chroot-Directory="$1"
                APT_CONFIG="$MMDEBSTRAP_APT_CONFIG" DEBIAN_FRONTEND=noninteractive NEEDRESTART_SUSPEND=1 apt-get full-upgrade -oDPkg::Chroot-Directory="$1" -y --allow-downgrades
                APT_CONFIG="$MMDEBSTRAP_APT_CONFIG" DEBIAN_FRONTEND=noninteractive NEEDRESTART_SUSPEND=1 apt-get autoremove -oDPkg::Chroot-Directory="$1" -y --purge
                sed -i "s|^deb|deb [signed-by=\"/usr/share/keyrings/radxa-archive-keyring.gpg\"]|g" "$1"/etc/apt/sources.list.d/*-radxa*.list
                rm "$1/etc/apt/sources.list.d/99-local-apt-repository.list"
                rm "$1/srv/local-apt-repository/Packages"
                rm "$1/srv/local-apt-repository/Release"
            |||,
        ],
    }
} + (if install_vscodium
then
    vscodium(suite, radxa_mirror)
else
    {}
)
